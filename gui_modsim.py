# -*- coding: utf-8 -*-
"""GUI MODSIM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1thg7ARRybRZgPARyIkl3-lN6QE7PPTOl
"""

# streamlit_sarima_gui_full.py (Multi-Sesi SARIMA GUI)

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import scipy.stats as stats
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import adfuller
from sklearn.metrics import mean_absolute_error, mean_squared_error
from statsmodels.stats.diagnostic import acorr_ljungbox
from scipy.stats import shapiro
from pmdarima.arima import ARIMA as PMDARIMA

from statsmodels.tsa.statespace.sarimax import SARIMAX
import pmdarima as pm
from scipy.stats import shapiro

st.set_page_config(page_title="SARIMA Time Series GUI", layout="wide")

# Sidebar navigasi sesi
sesi = st.sidebar.radio("Navigasi Sesi", [
    "Sesi 1: Upload & Setup Waktu",
    "Sesi 2: Eksplorasi Data",
    "Sesi 3: Identifikasi Model",
    "Sesi 4: Pemodelan",
    "Sesi 5: Evaluasi & Uji Diagnostik",
    "Sesi 6: Forecast & Export"
])

# ===== Sesi 1 =====
if sesi == "Sesi 1: Upload & Setup Waktu":
    st.title(":bar_chart: SARIMA GUI - Sesi 1: Upload & Setup Waktu")

    st.subheader("👥 Informasi Kelompok")
    st.markdown("""
    **Kelompok 2**
    - Galen Ananta (140110220006)
    - Rizky Febrian (140110220019)
    - Asrie Putri Janitha (140110220023)
    - Zhafir Alhaq Ali Aqil B. (140110220053)
    - Thania Nur Salsabila (140110220057)
    - Raisa Huria Pasha (140110220064)
    - Muhammad Ismail Sabiq (140110220066)

    📄 **Format CSV yang diterima:**
    - Hanya 1 kolom berisi nilai time series (tanpa header pun boleh)
    - Setelah upload, kamu akan diminta mengisi tanggal awal dan frekuensi data
    """)

    st.subheader("📤 Upload Data Time Series")
    uploaded_file = st.file_uploader("Upload file CSV (1 kolom data saja)", type=["csv"])

    if uploaded_file:
        df = pd.read_csv(uploaded_file, header=None)
        ts_values = df.iloc[:, 0].dropna()

        st.success("✅ Data berhasil dimuat!")
        st.write("**Preview data:**")
        st.write(ts_values.head())

        st.subheader("📅 Setup Waktu")
        start_date = st.date_input("Tanggal awal", pd.to_datetime("2020-01-01"))
        freq_choice = st.selectbox("Frekuensi data", ["Harian", "Bulanan", "Tahunan"])
        freq_map = {"Harian": "D", "Bulanan": "M", "Tahunan": "Y"}
        freq = freq_map[freq_choice]

        try:
            date_index = pd.date_range(start=start_date, periods=len(ts_values), freq=freq)
            ts = pd.Series(ts_values.values, index=date_index)
            st.success("✅ Index waktu berhasil dibuat!")

            fig = go.Figure()
            fig.add_trace(go.Scatter(x=ts.index, y=ts.values, mode="lines", name="Data"))
            fig.update_layout(title="Plot Time Series", xaxis_title="Waktu", yaxis_title="Nilai")
            st.plotly_chart(fig, use_container_width=True)

            # Simpan ke session state
            st.session_state.ts = ts
            st.session_state.freq = freq
            st.session_state.start_date = start_date

        except Exception as e:
            st.error(f"❌ Gagal membuat index waktu: {e}")

# ===== Sesi 2 =====
elif sesi == "Sesi 2: Eksplorasi Data":
    st.title(":bar_chart: SARIMA GUI - Sesi 2: Eksplorasi Data")

    if "ts" not in st.session_state:
        st.warning("⚠️ Silakan upload data terlebih dahulu di Sesi 1.")
        st.stop()

    ts = st.session_state.ts

    st.subheader("📉 Plot Time Series")
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=ts.index, y=ts.values, mode="lines", name="Data"))
    fig.update_layout(title="Time Series", xaxis_title="Waktu", yaxis_title="Nilai")
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("📊 QQ-Plot")
    fig2, ax = plt.subplots()
    stats.probplot(ts, dist="norm", plot=ax)
    st.pyplot(fig2)

# ===== Sesi 3 =====
elif sesi == "Sesi 3: Identifikasi Model":
    st.title(":mag: SARIMA GUI - Sesi 3: Identifikasi Model")

    if "ts" not in st.session_state:
        st.warning("⚠️ Silakan upload data terlebih dahulu di Sesi 1.")
        st.stop()

    ts = st.session_state.ts

    lag_slider = st.slider("Jumlah lag untuk ACF dan PACF", min_value=5, max_value=30, value=20, step=1)

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("🔁 Plot ACF")
        fig_acf, ax_acf = plt.subplots()
        plot_acf(ts, lags=lag_slider, ax=ax_acf)
        st.pyplot(fig_acf)

    with col2:
        st.subheader("🔁 Plot PACF")
        fig_pacf, ax_pacf = plt.subplots()
        plot_pacf(ts, lags=lag_slider, ax=ax_pacf)
        st.pyplot(fig_pacf)

    st.subheader("📉 ADF Test")
    adf_result = adfuller(ts)
    st.write(f"ADF Statistic: {adf_result[0]:.4f}")
    st.write(f"p-value: {adf_result[1]:.4e}")
    if adf_result[1] < 0.05:
        st.success(f"✅ Kesimpulan: p-value = {adf_result[1]:.4e} < 0.05 → Data stasioner")
    else:
        st.warning(f"⚠️ Kesimpulan: p-value = {adf_result[1]:.4e} ≥ 0.05 → Data tidak stasioner")
    st.markdown("**Hipotesis:**")
    st.markdown("- H0: Data tidak stasioner")
    st.markdown("- H1: Data stasioner")
    st.markdown("**Syarat:** Tolak H0 jika p-value < 0.05")

    st.subheader("⚙️ Differencing")
    d = st.number_input("Orde differencing (d)", min_value=0, max_value=10, value=1)
    D = st.number_input("Orde differencing musiman (D)", min_value=0, max_value=10, value=0)
    s = st.number_input("Periode musiman (s)", min_value=0, value=12)

    ts_diff = ts.diff(d).dropna()
    if D > 0:
        ts_diff = ts_diff.diff(s * D).dropna()

    st.subheader("📉 ADF Test Setelah Differencing")
    adf_result_diff = adfuller(ts_diff)
    st.write(f"ADF Statistic: {adf_result_diff[0]:.4e}")
    st.write(f"p-value: {adf_result_diff[1]:.4e}")
    if adf_result_diff[1] < 0.05:
        st.success(f"✅ Kesimpulan: p-value = {adf_result_diff[1]:.4e} < 0.05 → Data stasioner")
    else:
        st.warning(f"⚠️ Kesimpulan: p-value = {adf_result_diff[1]:.4e} ≥ 0.05 → Data tidak stasioner")
    st.markdown("**Hipotesis:**")
    st.markdown("- H0: Data tidak stasioner")
    st.markdown("- H1: Data stasioner")
    st.markdown("**Syarat:** Tolak H0 jika p-value < 0.05")

    col3, col4 = st.columns(2)
    with col3:
        st.subheader("ACF Setelah Differencing")
        fig_acf2, ax_acf2 = plt.subplots()
        plot_acf(ts_diff, lags=lag_slider, ax=ax_acf2)
        st.pyplot(fig_acf2)

    with col4:
        st.subheader("PACF Setelah Differencing")
        fig_pacf2, ax_pacf2 = plt.subplots()
        plot_pacf(ts_diff, lags=lag_slider, ax=ax_pacf2)
        st.pyplot(fig_pacf2)

    st.session_state.ts_diff = ts_diff

# ===== Sesi 4 =====
elif sesi == "Sesi 4: Pemodelan":
    st.title(":wrench: SARIMA GUI - Sesi 4: Pemodelan")
    st.markdown(":information_source: *Catatan:* Hasil Python bisa sedikit berbeda dari R karena perbedaan metode optimasi yang digunakan antara kedua platform.")

    if "ts_diff" not in st.session_state:
        st.warning("⚠️ Silakan lakukan differencing di Sesi 3 terlebih dahulu.")
        st.stop()

    from statsmodels.tsa.statespace.sarimax import SARIMAX
    import pmdarima as pm

    ts_diff = st.session_state.ts_diff

    model_type = st.radio("Pilih jenis pemodelan", ["Auto SARIMA", "Manual SARIMA"])

    if model_type == "Manual SARIMA":
        st.markdown("**Masukkan parameter SARIMA (p, d, q) (P, D, Q, s):**")
        p = st.number_input("p", 0, 10, value=1)
        d = st.number_input("d", 0, 2, value=1)
        q = st.number_input("q", 0, 10, value=1)
        P = st.number_input("P", 0, 10, value=0)
        D = st.number_input("D", 0, 2, value=0)
        Q = st.number_input("Q", 0, 10, value=0)
        s = st.number_input("s (periode musiman)", 1, 24, value=12)

        model = SARIMAX(st.session_state.ts,
                        order=(p, d, q),
                        seasonal_order=(P, D, Q, s),
                        enforce_stationarity=False,
                        enforce_invertibility=False).fit()
        st.session_state.model = model  # ⬅️ penting untuk Sesi 5

    else:
        st.write("🔁 Auto fitting SARIMA... tunggu sebentar...")
        model = pm.auto_arima(
            st.session_state.ts,
            seasonal=True,
            m=12,
            stepwise=True,
            suppress_warnings=True,
            error_action='ignore'
        )
        p, d, q = model.order
        P, D, Q, s = model.seasonal_order
        st.success(f"✅ Auto SARIMA Model: SARIMA({p},{d},{q}) x ({P},{D},{Q}){s}")

        st.session_state.model = model  # ⬅️ penting untuk Sesi 5

        auto_model_summary = model.summary().tables[0].as_text().splitlines()
        model_spec_line = next((line for line in auto_model_summary if "ARIMA" in line), "Model tidak ditemukan")

    st.subheader("📑 Ringkasan Model")
    try:
        summary_df = pd.DataFrame(model.summary().tables[1].data[1:], columns=model.summary().tables[1].data[0])
        st.dataframe(summary_df)
    except:
        st.text(model.summary())

# ===== Sesi 5 =====
elif sesi == "Sesi 5: Evaluasi & Uji Diagnostik":
    st.title(":bar_chart: SARIMA GUI - Sesi 5: Evaluasi & Uji Diagnostik")

    if "ts" not in st.session_state or "ts_diff" not in st.session_state:
        st.warning("⚠️ Silakan selesaikan sesi sebelumnya terlebih dahulu.")
        st.stop()

    ts = st.session_state.ts
    model = st.session_state.get("model")
    if model is None:
        st.warning("⚠️ Model belum tersedia. Silakan fit model di Sesi 4 terlebih dahulu.")
        st.stop()

    try:
        # Model dari pmdarima (auto_arima)
        pred = model.predict_in_sample()
    except AttributeError:
        # Model dari statsmodels (SARIMAX)
        pred = model.predict(start=0, end=len(ts)-1)

    # In-sample prediction
    mae = mean_absolute_error(ts, pred)
    rmse = np.sqrt(mean_squared_error(ts, pred))
    mape = np.mean(np.abs((ts - pred) / ts)) * 100

    st.subheader("📊 Evaluasi Model")
    st.write(f"**MAE:** {mae:.2f}")
    st.write(f"**RMSE:** {rmse:.2f}")
    st.write(f"**MAPE:** {mape:.2f}%")

    if hasattr(model, 'aic'):
        aic_val = model.aic() if callable(model.aic) else model.aic
        st.write(f"**AIC:** {aic_val:.2f}")
    if hasattr(model, 'bic'):
        bic_val = model.bic() if callable(model.bic) else model.bic
        st.write(f"**BIC:** {bic_val:.2f}")

    # Uji Ljung-Box
    st.subheader("🧪 Uji Ljung-Box")
    try:
        resid = model.resid() if callable(model.resid) else model.resid
    except:
        resid = ts - pred

    resid = model.resid() if callable(model.resid) else model.resid
    lb_test = acorr_ljungbox(resid, lags=[10], return_df=True)
    lb_pval = lb_test['lb_pvalue'].values[0]
    st.write(f"p-value: {lb_pval:.4f}")
    if lb_pval > 0.05:
        st.success("✅ Kesimpulan: p-value > 0.05 → Tidak ada autokorelasi → Model valid")
    else:
        st.warning("⚠️ Kesimpulan: p-value ≤ 0.05 → Terdapat autokorelasi → Model belum valid")
    st.markdown("**Hipotesis:**")
    st.markdown("- H0: Tidak ada autokorelasi dalam residual")
    st.markdown("- H1: Ada autokorelasi dalam residual")
    st.markdown("**Syarat:** Tolak H0 jika p-value < 0.05")

    # Uji Shapiro-Wilk
    st.subheader("🧪 Uji Shapiro-Wilk")
    from scipy.stats import shapiro
    resid = model.resid() if callable(model.resid) else model.resid
    shapiro_test = shapiro(resid)
    p_shapiro = shapiro_test.pvalue
    st.write(f"p-value: {p_shapiro:.4f}")
    if p_shapiro > 0.05:
        st.success("✅ Kesimpulan: p-value > 0.05 → Residual terdistribusi normal")
    else:
        st.warning("⚠️ Kesimpulan: p-value ≤ 0.05 → Residual tidak normal")
    st.markdown("**Hipotesis:**")
    st.markdown("- H0: Residual terdistribusi normal")
    st.markdown("- H1: Residual tidak terdistribusi normal")
    st.markdown("**Syarat:** Tolak H0 jika p-value < 0.05")

# ===== Sesi 6 =====
elif sesi == "Sesi 6: Forecast & Export":
    st.title(":crystal_ball: SARIMA GUI - Sesi 6: Forecast & Export")

    if "ts" not in st.session_state or "model" not in st.session_state:
        st.warning("⚠️ Silakan selesaikan sesi sebelumnya terlebih dahulu.")
        st.stop()

    ts = st.session_state.ts
    model = st.session_state.model

    st.subheader("🔮 Buat Forecast")
    horizon = st.number_input("Berapa langkah ke depan ingin diprediksi?", min_value=1, max_value=120, value=12)

    if isinstance(model, PMDARIMA):
        forecast_result = model.predict(n_periods=horizon)
    else:
        forecast_result = model.forecast(steps=horizon)
    future_index = pd.date_range(start=ts.index[-1], periods=horizon + 1, freq=ts.index.inferred_freq)[1:]
    forecast_df = pd.DataFrame({"Forecast": forecast_result}, index=future_index)

    st.plotly_chart(go.Figure([
        go.Scatter(x=ts.index, y=ts.values, name="Aktual"),
        go.Scatter(x=forecast_df.index, y=forecast_df.Forecast, name="Forecast")
    ]), use_container_width=True)

    # Export CSV
    st.subheader("📁 Download Hasil Prediksi")
    output_df = pd.concat([ts.rename("Aktual"), forecast_df], axis=0)
    output_csv = output_df.reset_index().rename(columns={"index": "Tanggal"}).to_csv(index=False).encode("utf-8")
    st.download_button("📥 Download CSV", output_csv, file_name="forecast_result.csv", mime="text/csv")
